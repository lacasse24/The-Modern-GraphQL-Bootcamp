
type Query {
    users(query: String): [User!]!
    posts(query: String): [Post]!
    comments: [Comment!]!
    me: User!
    post: Post!
}
type Mutation {
    createUser(user: CreateUserInput!): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, userData: UpdateUserInput): User!
    updatePost(id: ID!, postData: UpdatePostInput): Post!
    updateComment(id: ID!, commentData: UpdateCommentInput): Comment! 
    deletePost(id: ID!): Post!
    deleteComment(id: ID!): Comment!
    createPost(post: CreatePostInput!): Post!
    createComment(comment: CreateCommentInput!): Comment!
}

type Subscription {
    count: Int!
    comment: CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input UpdateCommentInput {
    text: String
}

input CreateUserInput {
    name: String!
    email: String!
    age: Int
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input CreateCommentInput {
    text: String!
    author: ID! 
    post: ID!
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}
type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}
type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}

enum MutationType {
    CREATED,
    UPDATED,
    DELETED
}
